---

---

<div></div>
<style>
  body {
    margin: 0;
    height: 100vh;
  }

  canvas {
    display: block;
  }
</style>
<script>
  import { TbEaseOut } from "solid-icons/tb";
  import * as THREE from "three";
  import { OBJLoader, MTLLoader } from "three/examples/jsm/Addons.js";

  // Create the Three.js Scene
  var scene = new THREE.Scene();

  // Create a new Perspective Camera
  var camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    0.1,
    1000,
  );
  camera.position.z = 25;

  // Create a Full Screen WebGL Renderer
  var renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
  renderer.setClearColor("#DDDDDD");
  renderer.setSize(window.innerWidth, window.innerHeight);

  document.body.appendChild(renderer.domElement);

  // Make sure the project is responsive based on window resizing
  window.addEventListener("resize", () => {
    renderer.setSize(window.innerWidth, window.innerHeight);
    camera.aspect = window.innerWidth / window.innerHeight;

    camera.updateProjectionMatrix();
  });

  // Add a light
  var light = new THREE.PointLight(0xffffff, 1.4, 1000);
  light.position.set(0, 15, 15);
  scene.add(light);

  // Defining a variable for our two models
  var ourObjLoader;
  //@ts-ignore
  var ourObj2;

  // Create a material
  var mtlLoader = new MTLLoader();
  mtlLoader.load(
    "https://s3-us-west-2.amazonaws.com/s.cdpn.io/2621168/glass.mtl",
    function (materials) {
      materials.preload();

      // Load the object
      var objLoader = new OBJLoader();
      objLoader.setMaterials(materials);
      objLoader.load(
        "https://s3-us-west-2.amazonaws.com/s.cdpn.io/2621168/glass.obj",
        function (object) {
          scene.add(object);

          //@ts-ignore
          ourObj = object;
          object.position.z -= 370;
          object.rotation.x = 250;
        },
      );
    },
  );

  // Create a material
  var mtlLoader = new MTLLoader();
  mtlLoader.load(
    "https://s3-us-west-2.amazonaws.com/s.cdpn.io/2621168/center.mtl",
    function (materials) {
      materials.preload();

      // Load the object
      var objLoader = new OBJLoader();
      objLoader.setMaterials(materials);
      objLoader.load("", function (object) {
        scene.add(object);
        ourObj2 = object;
        object.position.z -= 70;
        object.rotation.x = 250;
        //@ts-ignore
        this.tl = new TimelineMax();
        //@ts-ignore
        this.tl.from(ourObj2.scale, 2, {
          y: 0,
          x: 0,
          z: 0,
        });
        //@ts-ignore
        this.tl.from(ourObj2.position, 2, {
          y: 0,
          z: -30,
        });
        //@ts-ignore
        this.tl.from(
          //@ts-ignore
          ourObj.scale,
          2,
          { x: 1.5, y: 1.5, z: 0 },
          "-=2",
        );
        //@ts-ignore
        this.tl.from(ourObj.position, 1, { y: -20 }, "-=3");
      });
    },
  );

  var render = function () {
    requestAnimationFrame(render);

    // Rotate the objects indefinitely

    //@ts-ignore
    ourObj.rotation.z -= 0.01;

    //@ts-ignore
    ourObj2.rotation.z += 0.03;

    renderer.render(scene, camera);
  };

  // Call this to render the entire scene
  render();
</script>
