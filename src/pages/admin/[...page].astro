---
import {
  deleteBlog,
  getBlogFromId,
  getBlogs,
  getTotalAmountOfBlogs,
  publishBlogFromId,
} from "@/libs/db/blog/queries";
import Pagination from "@/components/UI/Pagination.astro";
import { CLOUDFRONT_URL } from "@/data/constants";
import { deployVercel } from "@/libs/utils";
import Deleter from "@/components/Blog/Deleter.astro";
import Publisher from "@/components/Blog/Publisher.astro";
import { Image } from "astro:assets";
import RootLayout from "@/libs/../layouts/RootLayout.astro";
import { deleteBlogFiles } from "@/libs/s3";

let actionStatus: undefined | string = undefined;
// Handle publish and delete
if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  const action = data.get("action");
  const id = data.get("id");
  if (action === "publish" && id) {
    try {
      await publishBlogFromId({
        id: Number.parseInt(id.toString()),
      });
      actionStatus = "Successfully published post!";
      await deployVercel();
    } catch (e) {
      console.error(e);
      actionStatus = "Failed to publish post.";
    }
  }
  if (action === "delete" && id) {
    try {
      const blog = await getBlogFromId({
        id: parseInt(id?.toString()),
      });
      if (!blog.imageKey) {
        return new Response("", { status: 404 });
      }
      const imageKey = blog.imageKey;
      await deleteBlog(parseInt(id?.toString()));
      await deleteBlogFiles({
        key: imageKey,
      });
      actionStatus = "Successfully deleted post.";
      await deployVercel();
    } catch (e) {
      console.error(e);
      actionStatus = "Failed to delete post.";
    }
  }
}
if (Astro.request.method === "GET") {
  actionStatus = undefined;
}
const { page } = Astro.params;
let safeBlogs;
const resp = await getTotalAmountOfBlogs();
let totalPages = resp.data?.["COUNT(*)"];
totalPages = totalPages ? Math.floor(totalPages / 10) : 1;
const LIMIT = 10;
if (!page) {
  safeBlogs = await getBlogs(0, LIMIT);
} else {
  const offset = Number.parseInt(page) * LIMIT;
  safeBlogs = await getBlogs(offset, LIMIT);
}
---

<RootLayout>
  <main class="flex justify-center">
    <section class="">
      <a href="/admin/post" class="border p-1">Post Blog</a>
      <h1 class="text-3xl py-4 text-gray-100 font-semibold">
        My Posts
      </h1>
      {actionStatus && <h2>{actionStatus}</h2>}
      <ul class="space-y-8">
        {
          safeBlogs?.map((post) => {
            const arr = post.imageKey.split(".");
            const imageId = arr[0];
            return (
              <li
                class="bg-black/30 w-[600px] border-2 border-purple-300/30
                rounded-lg p-4"
              >
                <div class="flex gap-x-4">
                  <div class="flex flex-col gap-y-2">
                    <Deleter id={post.id.toString()} />
                    <a
                      class="border p-2 rounded-md"
                      href={`/admin/update/${post.slug}`}
                    >
                      Edit
                    </a>
                    {!post.published && (
                      <Publisher id={post.id.toString()} />
                    )}
                  </div>
                  <div class="w-[150px]">
                    <Image
                      width={150}
                      height={100}
                      class="object-cover w-[150px] h-[100px]"
                      src={
                        CLOUDFRONT_URL +
                        "/" +
                        imageId +
                        "_150x.webp"
                      }
                      alt=""
                    />
                  </div>
                  <div class="flex flex-col justify-between gap-y-4">
                    <div>
                      <h4 class="text-3xl pb-1">
                        {post.title}
                      </h4>
                      <p class="text-gray-400 text-[14px]">
                        {post.description}
                      </p>
                    </div>
                    <p class="text-gray-300 text-right text-sm" />
                  </div>
                </div>
              </li>
            );
          })
        }
      </ul>
      <Pagination
        currentPage={parseInt(page ?? "1")}
        totalPage={totalPages ?? 1}
      />
    </section>
  </main>
</RootLayout>
